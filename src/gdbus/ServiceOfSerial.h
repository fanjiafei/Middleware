/*
 * Generated by gdbus-codegen 2.48.2. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __SERVICEOFSERIAL_H__
#define __SERVICEOFSERIAL_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for Serial.interface */

#define TYPE_SERIAL_INTERFACE (serial_interface_get_type ())
#define SERIAL_INTERFACE(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_SERIAL_INTERFACE, SerialInterface))
#define IS_SERIAL_INTERFACE(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_SERIAL_INTERFACE))
#define SERIAL_INTERFACE_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_SERIAL_INTERFACE, SerialInterfaceIface))

struct _SerialInterface;
typedef struct _SerialInterface SerialInterface;
typedef struct _SerialInterfaceIface SerialInterfaceIface;

struct _SerialInterfaceIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_set_air_conditioner_info) (
    SerialInterface *object,
    GDBusMethodInvocation *invocation,
    guint16 arg_arg1,
    guint16 arg_arg2,
    guint16 arg_arg3);

  gboolean (*handle_set_door_info) (
    SerialInterface *object,
    GDBusMethodInvocation *invocation,
    guint16 arg_arg1,
    guint16 arg_arg2);

  gboolean (*handle_set_key_info) (
    SerialInterface *object,
    GDBusMethodInvocation *invocation,
    guint16 arg_arg1,
    guint16 arg_arg2);

  gboolean (*handle_set_lamp_info) (
    SerialInterface *object,
    GDBusMethodInvocation *invocation,
    guint16 arg_arg1,
    guint16 arg_arg2);

  gboolean (*handle_set_speed_info) (
    SerialInterface *object,
    GDBusMethodInvocation *invocation,
    guint16 arg_arg1,
    guint16 arg_arg2,
    guint16 arg_arg3);

  gboolean (*handle_set_start_info) (
    SerialInterface *object,
    GDBusMethodInvocation *invocation,
    guchar arg_arg1);

  void (*broadcast_caninfo) (
    SerialInterface *object,
    const gchar *arg_candata,
    guchar arg_len);

};

GType serial_interface_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *serial_interface_interface_info (void);
guint serial_interface_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void serial_interface_complete_set_door_info (
    SerialInterface *object,
    GDBusMethodInvocation *invocation,
    gboolean unnamed_arg2);

void serial_interface_complete_set_lamp_info (
    SerialInterface *object,
    GDBusMethodInvocation *invocation,
    gboolean unnamed_arg2);

void serial_interface_complete_set_key_info (
    SerialInterface *object,
    GDBusMethodInvocation *invocation,
    gboolean unnamed_arg2);

void serial_interface_complete_set_speed_info (
    SerialInterface *object,
    GDBusMethodInvocation *invocation,
    gboolean unnamed_arg3);

void serial_interface_complete_set_air_conditioner_info (
    SerialInterface *object,
    GDBusMethodInvocation *invocation,
    gboolean unnamed_arg3);

void serial_interface_complete_set_start_info (
    SerialInterface *object,
    GDBusMethodInvocation *invocation,
    gboolean unnamed_arg1);



/* D-Bus signal emissions functions: */
void serial_interface_emit_broadcast_caninfo (
    SerialInterface *object,
    const gchar *arg_candata,
    guchar arg_len);



/* D-Bus method calls: */
void serial_interface_call_set_door_info (
    SerialInterface *proxy,
    guint16 arg_arg1,
    guint16 arg_arg2,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean serial_interface_call_set_door_info_finish (
    SerialInterface *proxy,
    gboolean *out_unnamed_arg2,
    GAsyncResult *res,
    GError **error);

gboolean serial_interface_call_set_door_info_sync (
    SerialInterface *proxy,
    guint16 arg_arg1,
    guint16 arg_arg2,
    gboolean *out_unnamed_arg2,
    GCancellable *cancellable,
    GError **error);

void serial_interface_call_set_lamp_info (
    SerialInterface *proxy,
    guint16 arg_arg1,
    guint16 arg_arg2,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean serial_interface_call_set_lamp_info_finish (
    SerialInterface *proxy,
    gboolean *out_unnamed_arg2,
    GAsyncResult *res,
    GError **error);

gboolean serial_interface_call_set_lamp_info_sync (
    SerialInterface *proxy,
    guint16 arg_arg1,
    guint16 arg_arg2,
    gboolean *out_unnamed_arg2,
    GCancellable *cancellable,
    GError **error);

void serial_interface_call_set_key_info (
    SerialInterface *proxy,
    guint16 arg_arg1,
    guint16 arg_arg2,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean serial_interface_call_set_key_info_finish (
    SerialInterface *proxy,
    gboolean *out_unnamed_arg2,
    GAsyncResult *res,
    GError **error);

gboolean serial_interface_call_set_key_info_sync (
    SerialInterface *proxy,
    guint16 arg_arg1,
    guint16 arg_arg2,
    gboolean *out_unnamed_arg2,
    GCancellable *cancellable,
    GError **error);

void serial_interface_call_set_speed_info (
    SerialInterface *proxy,
    guint16 arg_arg1,
    guint16 arg_arg2,
    guint16 arg_arg3,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean serial_interface_call_set_speed_info_finish (
    SerialInterface *proxy,
    gboolean *out_unnamed_arg3,
    GAsyncResult *res,
    GError **error);

gboolean serial_interface_call_set_speed_info_sync (
    SerialInterface *proxy,
    guint16 arg_arg1,
    guint16 arg_arg2,
    guint16 arg_arg3,
    gboolean *out_unnamed_arg3,
    GCancellable *cancellable,
    GError **error);

void serial_interface_call_set_air_conditioner_info (
    SerialInterface *proxy,
    guint16 arg_arg1,
    guint16 arg_arg2,
    guint16 arg_arg3,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean serial_interface_call_set_air_conditioner_info_finish (
    SerialInterface *proxy,
    gboolean *out_unnamed_arg3,
    GAsyncResult *res,
    GError **error);

gboolean serial_interface_call_set_air_conditioner_info_sync (
    SerialInterface *proxy,
    guint16 arg_arg1,
    guint16 arg_arg2,
    guint16 arg_arg3,
    gboolean *out_unnamed_arg3,
    GCancellable *cancellable,
    GError **error);

void serial_interface_call_set_start_info (
    SerialInterface *proxy,
    guchar arg_arg1,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean serial_interface_call_set_start_info_finish (
    SerialInterface *proxy,
    gboolean *out_unnamed_arg1,
    GAsyncResult *res,
    GError **error);

gboolean serial_interface_call_set_start_info_sync (
    SerialInterface *proxy,
    guchar arg_arg1,
    gboolean *out_unnamed_arg1,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define TYPE_SERIAL_INTERFACE_PROXY (serial_interface_proxy_get_type ())
#define SERIAL_INTERFACE_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_SERIAL_INTERFACE_PROXY, SerialInterfaceProxy))
#define SERIAL_INTERFACE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_SERIAL_INTERFACE_PROXY, SerialInterfaceProxyClass))
#define SERIAL_INTERFACE_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_SERIAL_INTERFACE_PROXY, SerialInterfaceProxyClass))
#define IS_SERIAL_INTERFACE_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_SERIAL_INTERFACE_PROXY))
#define IS_SERIAL_INTERFACE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_SERIAL_INTERFACE_PROXY))

typedef struct _SerialInterfaceProxy SerialInterfaceProxy;
typedef struct _SerialInterfaceProxyClass SerialInterfaceProxyClass;
typedef struct _SerialInterfaceProxyPrivate SerialInterfaceProxyPrivate;

struct _SerialInterfaceProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  SerialInterfaceProxyPrivate *priv;
};

struct _SerialInterfaceProxyClass
{
  GDBusProxyClass parent_class;
};

GType serial_interface_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (SerialInterfaceProxy, g_object_unref)
#endif

void serial_interface_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
SerialInterface *serial_interface_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
SerialInterface *serial_interface_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void serial_interface_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
SerialInterface *serial_interface_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
SerialInterface *serial_interface_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_SERIAL_INTERFACE_SKELETON (serial_interface_skeleton_get_type ())
#define SERIAL_INTERFACE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_SERIAL_INTERFACE_SKELETON, SerialInterfaceSkeleton))
#define SERIAL_INTERFACE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_SERIAL_INTERFACE_SKELETON, SerialInterfaceSkeletonClass))
#define SERIAL_INTERFACE_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_SERIAL_INTERFACE_SKELETON, SerialInterfaceSkeletonClass))
#define IS_SERIAL_INTERFACE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_SERIAL_INTERFACE_SKELETON))
#define IS_SERIAL_INTERFACE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_SERIAL_INTERFACE_SKELETON))

typedef struct _SerialInterfaceSkeleton SerialInterfaceSkeleton;
typedef struct _SerialInterfaceSkeletonClass SerialInterfaceSkeletonClass;
typedef struct _SerialInterfaceSkeletonPrivate SerialInterfaceSkeletonPrivate;

struct _SerialInterfaceSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  SerialInterfaceSkeletonPrivate *priv;
};

struct _SerialInterfaceSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType serial_interface_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (SerialInterfaceSkeleton, g_object_unref)
#endif

SerialInterface *serial_interface_skeleton_new (void);


G_END_DECLS

#endif /* __SERVICEOFSERIAL_H__ */
